{"version":3,"sources":["components/NavLinks.js","components/NavigationBar.js","views/Home.js","components/MiniMovieDes.js","hooks/SearchFetcher.js","components/ChangePageLinks.js","views/SearchView.js","hooks/Fetcher.js","views/MovieDescriptionView.js","App.js","serviceWorker.js","index.js"],"names":["NavLinks","className","to","NavBar","HomeView","type","id","placeholder","onClick","redirect_link","document","getElementById","value","window","location","href","search","MiniMovieDes","props","product_description_url","String","data","imdbID","src","Poster","alt","Title","Year","SearchFetcher","url","useEffect","getmovies","useState","movies","addMovies","a","fetch","response","json","json_response","Search","ChangePageLinks","prev_page_path","prev_path","next_page_path","next_path","page_no","page","SearchView","match","params","pg_no","search_keyword","keywords","reload","prev_page_no","parseInt","map","movie","key","Fetcher","MovieDescriptionView","imdbRating","Rated","Released","Language","Country","Runtime","Genre","Writer","Actors","Awards","Plot","App","path","exact","component","Boolean","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.313d6fbf.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Link\r\n} from 'react-router-dom'\r\nimport '../App.css';\r\n\r\nfunction NavLinks() {\r\n  return (\r\n    <div className=\"links-container\">\r\n        <ul className=\"links\">\r\n            <Link to='/' className=\"link\">\r\n                <li>Home</li>\r\n            </Link>\r\n        </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavLinks;","import React from 'react';\r\nimport '../App.css';\r\nimport NavLinks from \"./NavLinks.js\"\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <nav>\r\n        <div className=\"logo\">\r\n            <h4>MoViE DesCriPt</h4>\r\n        </div>  \r\n        <NavLinks />\r\n        <hr></hr>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React  from 'react';\r\nimport {FaSearch} from 'react-icons/fa'\r\nimport '../App.css';\r\n\r\nfunction HomeView() {\r\n    //handling search input\r\n    function search(){\r\n        let search_keyword=document.getElementById('search').value;\r\n        let redirect_link=\"/Search/keyword=\"+search_keyword+\"/page=1\";\r\n        window.location.href=redirect_link;\r\n    };\r\n    return (\r\n        <div className=\"home-page\">\r\n            <div className=\"search-container\">\r\n                <input type='text' id=\"search\" placeholder='Searh here'></input>\r\n                <button type='button' id=\"search-btn\" onClick={()=>search()}>\r\n                    <FaSearch className=\"search-icon\"/>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default HomeView;","import React from 'react';\r\nimport {\r\n    Link\r\n} from 'react-router-dom'\r\nimport '../App.css';\r\n\r\nfunction MiniMovieDes(props){\r\n    var product_description_url=\"/movie_description/\"+String(props.data.imdbID);\r\n    return(\r\n        <div>\r\n            <Link to={product_description_url} id={props.data.imdbID} className=\"movie-link\"> \r\n                <div className=\"movie-description\">\r\n                    <div className=\"image-container\">\r\n                        <img src={props.data.Poster} alt=\"movie poster\"></img>\r\n                    </div>\r\n                    <h5>{props.data.Title}</h5>\r\n                    <p>\r\n                        <span>Released year: </span>\r\n                        <span>{props.data.Year}</span>\r\n                    </p>\r\n                </div>\r\n            </Link>  \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MiniMovieDes","import {useState,useEffect}  from 'react';\r\n\r\nexport default function SearchFetcher(url){\r\n    useEffect(()=>{\r\n        getmovies(url)\r\n    },[url]);\r\n\r\n    const [movies,addMovies]=useState([]);\r\n\r\n    async function getmovies(url){\r\n        var response=await fetch(url);\r\n        var json_response=await response.json();\r\n        addMovies(json_response.Search);\r\n    };\r\n    return movies\r\n}","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction ChangePageLinks(props){\r\n    let prev_page_path=props.prev_path;\r\n    let next_page_path=props.next_path;\r\n    let page_no=props.page;\r\n    return(\r\n        <div className=\"change-page\">\r\n            <Link to={prev_page_path} className=\"page-change-btn\">\r\n                prev\r\n            </Link>\r\n            <span>{page_no}</span>\r\n            <Link to={next_page_path} className=\"page-change-btn\">\r\n                next\r\n            </Link>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ChangePageLinks;","import React  from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport '../App.css';\r\nimport MiniMovieDes from '../components/MiniMovieDes'\r\nimport SearchFetcher from '../hooks/SearchFetcher'\r\nimport ChangePageLinks from '../components/ChangePageLinks'\r\n\r\nfunction SearchView(match) {\r\n    var page_no=match.match.params.pg_no;\r\n    var search_keyword=match.match.params.keywords;\r\n    function refreshPage(){ \r\n        window.location.reload(); \r\n    }\r\n    const url=`http://www.omdbapi.com/?apikey=59ecd04c&s=${search_keyword}&page=${page_no}`;\r\n    const movies=SearchFetcher(url);\r\n    //handling error of having to many movies sent\r\n    if(movies==null){\r\n        return(\r\n            <div className=\"home-page\">\r\n                Please enter a descriptive keyword to search<br></br>\r\n                <Link to='/'>go to search again</Link><br></br>\r\n                or <button type=\"button\" onClick={refreshPage}>Reload</button>\r\n            </div>\r\n        )\r\n    };\r\n    let prev_page_no=page_no-1;\r\n    if(prev_page_no===0){\r\n        prev_page_no=1;\r\n    };\r\n    let next_page_no=parseInt(page_no)+1;\r\n    let prev_page_path=\"/Search/keyword=\"+search_keyword+\"/page=\"+prev_page_no;\r\n    let next_page_path=\"/Search/keyword=\"+search_keyword+\"/page=\"+next_page_no;\r\n    return (\r\n        //getting the search result\r\n        <div className=\"home-page\">\r\n            <ChangePageLinks prev_path={prev_page_path} next_path={next_page_path} page={page_no}/>\r\n            <div className=\"movies-container\">\r\n                {movies.map(movie=><MiniMovieDes key={movie.imdbID} data={movie}/>)}\r\n            </div>\r\n            <ChangePageLinks prev_path={prev_page_path} next_path={next_page_path} page={page_no}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchView;","import {useState,useEffect}  from 'react';\r\n\r\nexport default function Fetcher(url){\r\n    useEffect(()=>{\r\n        getmovies(url)\r\n    },[url]);\r\n\r\n    const [movies,addMovies]=useState([]);\r\n\r\n    async function getmovies(url){\r\n        var response=await fetch(url);\r\n        var json_response=await response.json();\r\n        addMovies(json_response);\r\n    };\r\n\r\n    return movies\r\n}","import React from 'react';\r\nimport Fetcher from '../hooks/Fetcher';\r\n\r\nexport default function MovieDescriptionView(match){\r\n    const movie_id=match.match.params.id;\r\n    const url='http://www.omdbapi.com/?apikey=59ecd04c&i='+movie_id;\r\n\r\n    const movie=Fetcher(url);\r\n    return(\r\n        <div className=\"full-movie-description\">\r\n            <div className=\"image-container\">\r\n                <img src={movie.Poster} alt=\"movie poster\"></img>\r\n            </div>\r\n            <div className=\"description\">\r\n                <h4>{movie.Title}</h4>\r\n                <p>imdb Ratings: {movie.imdbRating}</p>\r\n                <p>Rated:        {movie.Rated}</p>\r\n                <p>Raleased:     {movie.Released}</p>\r\n                <p>Year:         {movie.Year}</p>\r\n                <p>Language:     {movie.Language}</p>\r\n                <p>Country:      {movie.Country}</p>\r\n                <p>Duration:     {movie.Runtime}</p>\r\n                <p>Genre:        {movie.Genre}</p>\r\n                <p>Writer:       {movie.Writer}</p>\r\n                <p>Actors:       {movie.Actors}</p>\r\n                <p>Awards:       {movie.Awards}</p>\r\n                <p>Plot:         {movie.Plot}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom';\nimport './App.css';\nimport Navbar from './components/NavigationBar';\nimport HomeView from './views/Home';\nimport SearchView from './views/SearchView'\nimport MovieDescriptionView from './views/MovieDescriptionView';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        \n        <Navbar />\n\n        <Switch>\n          <Route path='/' exact component={HomeView}></Route>\n          <Route path='/Search/keyword=:keywords/page=:pg_no' exact component={SearchView}></Route>\n          <Route path='/movie_description/:id' component={MovieDescriptionView}></Route>\n        </Switch>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}